<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kuka.pojo.mapping.order">
    <insert id="insertOrder">
        insert into [order](ordername, price , [User],createdon) values(#{orderName}, #{price},#{user.id},#{createdon}) ;
    </insert>

    <!--用resultMap标签定义数据库的查询结果映射，这个结果不能直接和我们自定义的类进行交互，需要通过resultMap标签定义结果映射才能使用我们自定义的类接收数据。-->
    <select id="selectOne" resultMap="rm_Order">
        SELECT
        <!-- 定义需要查询的别名 -->
        o.id id ,
        o.ordername ordername ,
        o.price price ,
        o.[user] uid ,
        c.id userid ,
        c.name username
        FROM
        <!-- 定义需要查询的字段 -->
        [order] o
        <!-- 使用左外连接查询 -->
        LEFT  OUTER JOIN  [User] c on o.[user] = c.id
        where
        o.id = #{id}
    </select>
    <select id="selectAll" resultMap="rm_Order">
        SELECT
          o.id id ,
          o.orderno ordername ,
          o.price price ,
          o.[user] uid ,
          c.id userid ,
          c.name username
        FROM
          [order] o
          LEFT  OUTER JOIN  [user] c on o.[user] = c.id
    </select>

    <!-- 使用resultMap标签定义结果映射，即将id为"rm_Order"的查询结果和我们自定义的类做一个关联关系，否则直接拿查询出来的结果字段和我们自定义的字段是对应不上的！-->
    <resultMap id="rm_Order" type="com.kuka.pojo.Order">
        <!--将查询结果“oid”字段对应为我们自定义别名类“_Order”的“id"字段-->
        <id column="id" property="id" />
        <result column="ordername" property="orderName"/>
        <result column="price" property="price"/>
        <!-- 多对一关联关系 -->
        <!-- 使用association这个标签可以建立关联属性， property表示"_Order"的属性，column是通过上面定义的"ocid"别名来查询的，而javaType表示指定"customer"岁对应的属性为"_Customer" -->
        <association property="user" column="uid" javaType="com.kuka.pojo.User">
            <!--下面就是具体的对应关系。-->
            <id column="userid" property="id" />
            <result column="username" property="userName" />
        </association>
    </resultMap>
</mapper>